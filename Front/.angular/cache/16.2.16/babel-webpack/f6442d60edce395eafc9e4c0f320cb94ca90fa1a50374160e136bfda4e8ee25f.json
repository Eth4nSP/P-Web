{"ast":null,"code":"export {};","map":{"version":3,"names":[],"sources":["C:\\Users\\ETHAN PIERCE\\Desktop\\web\\P-Web\\src\\app\\admin-panel\\admin-panel.component.ts"],"sourcesContent":["import { Component, OnInit, OnDestroy } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { Subscription } from 'rxjs';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { RouterLink } from '@angular/router';\r\nimport { QuestionService, Question, QuestionsData } from '../services/question.service'; \r\n\r\n@Component({\r\n  selector: 'app-admin-panel',\r\n  standalone: true,\r\n  imports: [CommonModule, FormsModule, RouterLink],\r\n    templateUrl: './admin-panel.component.html',\r\n \r\nexport class AdminPanelComponent implements OnInit, OnDestroy {\r\n  // Formulario\r\n  selectedDifficulty: 'facil' | 'medio' | 'dificil' = 'facil';\r\n  newQuestion: string = '';\r\n  newAnswer: string = '';\r\n\r\n  // Vista\r\n  activeTab: 'facil' | 'medio' | 'dificil' = 'facil';\r\n  questionsData: QuestionsData = { facil: [], medio: [], dificil: [] };\r\n\r\n  // Edición\r\n  editingId: string | null = null;\r\n  editQuestion: string = '';\r\n  editAnswer: string = '';\r\n\r\n  // Eliminación\r\n  showDeleteConfirm: boolean = false;\r\n  questionToDelete: Question | null = null;\r\n\r\n  // Suscripción\r\n  private subscription: Subscription = new Subscription();\r\n\r\n  // Configuración de dificultades\r\n  difficulties = [\r\n    { key: 'facil' as const, label: 'Fácil', icon: '🟢' },\r\n    { key: 'medio' as const, label: 'Medio', icon: '🟡' },\r\n    { key: 'dificil' as const, label: 'Difícil', icon: '🔴' }\r\n  ];\r\n\r\n  constructor(private questionService: QuestionService) {}\r\n\r\n  ngOnInit(): void {\r\n    // Suscribirse a cambios en las preguntas\r\n    this.subscription.add(\r\n      this.questionService.getQuestions().subscribe(data => {\r\n        this.questionsData = data;\r\n      })\r\n    );\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.subscription.unsubscribe();\r\n  }\r\n\r\n  // Validar si se puede agregar una pregunta\r\n  canAddQuestion(): boolean {\r\n    return this.newQuestion.trim().length > 0 && \r\n           this.newAnswer.trim().length > 0 && \r\n           this.newQuestion.length <= 200 &&\r\n           this.newAnswer.length <= 20;\r\n  }\r\n\r\n  // Agregar nueva pregunta\r\n  addQuestion(): void {\r\n    if (this.canAddQuestion()) {\r\n      this.questionService.addQuestion(\r\n        this.newQuestion.trim(),\r\n        this.newAnswer.trim(),\r\n        this.selectedDifficulty\r\n      );\r\n      this.clearForm();\r\n    }\r\n  }\r\n\r\n  // Limpiar formulario\r\n  clearForm(): void {\r\n    this.newQuestion = '';\r\n    this.newAnswer = '';\r\n    this.selectedDifficulty = 'facil';\r\n  }\r\n\r\n  // Obtener preguntas filtradas por dificultad activa\r\n  getFilteredQuestions(): Question[] {\r\n    return this.questionsData[this.activeTab] || [];\r\n  }\r\n\r\n  // Obtener cantidad de preguntas por dificultad\r\n  getQuestionCount(difficulty: 'facil' | 'medio' | 'dificil'): number {\r\n    return this.questionsData[difficulty]?.length || 0;\r\n  }\r\n\r\n  // Obtener icono de dificultad\r\n  getDifficultyIcon(difficulty: 'facil' | 'medio' | 'dificil'): string {\r\n    const icons = {\r\n      facil: '🟢',\r\n      medio: '🟡',\r\n      dificil: '🔴'\r\n    };\r\n    return icons[difficulty];\r\n  }\r\n\r\n  // Iniciar edición de pregunta\r\n  startEdit(question: Question): void {\r\n    this.editingId = question.id;\r\n    this.editQuestion = question.question;\r\n    this.editAnswer = question.answer;\r\n  }\r\n\r\n  // Guardar edición\r\n  saveEdit(): void {\r\n    if (this.editingId && this.editQuestion.trim() && this.editAnswer.trim()) {\r\n      this.questionService.editQuestion(\r\n        this.editingId,\r\n        this.editQuestion.trim(),\r\n        this.editAnswer.trim()\r\n      );\r\n      this.cancelEdit();\r\n    }\r\n  }\r\n\r\n  // Cancelar edición\r\n  cancelEdit(): void {\r\n    this.editingId = null;\r\n    this.editQuestion = '';\r\n    this.editAnswer = '';\r\n  }\r\n\r\n  // Confirmar eliminación (mostrar modal)\r\n  confirmDelete(question: Question): void {\r\n    this.questionToDelete = question;\r\n    this.showDeleteConfirm = true;\r\n  }\r\n\r\n  // Ejecutar eliminación\r\n  confirmDeleteAction(): void {\r\n    if (this.questionToDelete) {\r\n      this.questionService.deleteQuestion(this.questionToDelete.id);\r\n      this.cancelDelete();\r\n    }\r\n  }\r\n\r\n  // Cancelar eliminación\r\n  cancelDelete(): void {\r\n    this.showDeleteConfirm = false;\r\n    this.questionToDelete = null;\r\n  }\r\n\r\n  // Exportar preguntas\r\n  exportQuestions(): void {\r\n    const data = this.questionService.exportQuestions();\r\n    const blob = new Blob([data], { type: 'application/json' });\r\n    const url = window.URL.createObjectURL(blob);\r\n    const link = document.createElement('a');\r\n    link.href = url;\r\n    link.download = `preguntas-${new Date().toISOString().split('T')[0]}.json`;\r\n    document.body.appendChild(link);\r\n    link.click();\r\n    document.body.removeChild(link);\r\n    window.URL.revokeObjectURL(url);\r\n  }\r\n\r\n  // Importar preguntas\r\n  importQuestions(): void {\r\n    const input = document.createElement('input');\r\n    input.type = 'file';\r\n    input.accept = '.json';\r\n    \r\n    input.onchange = (event: any) => {\r\n      const file = event.target.files[0];\r\n      if (file) {\r\n        const reader = new FileReader();\r\n        reader.onload = (e: any) => {\r\n          const success = this.questionService.importQuestions(e.target.result);\r\n          if (success) {\r\n            alert('✅ Preguntas importadas correctamente');\r\n          } else {\r\n            alert('❌ Error al importar preguntas. Verifica el formato del archivo.');\r\n          }\r\n        };\r\n        reader.readAsText(file);\r\n      }\r\n    };\r\n    \r\n    input.click();\r\n  }\r\n\r\n  // Limpiar todas las preguntas\r\n  clearAllQuestions(): void {\r\n    if (confirm('⚠️ ¿Estás seguro de que quieres eliminar TODAS las preguntas? Esta acción no se puede deshacer.')) {\r\n      this.questionService.clearAllQuestions();\r\n      alert('🗑️ Todas las preguntas han sido eliminadas');\r\n    }\r\n  }\r\n}\r\n"],"mappings":"AAoMC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}