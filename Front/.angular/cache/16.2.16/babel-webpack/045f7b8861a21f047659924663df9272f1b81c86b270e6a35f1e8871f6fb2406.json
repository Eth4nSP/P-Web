{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nclass QuestionService {\n  questionsSubject = new BehaviorSubject({\n    facil: [],\n    medio: [],\n    dificil: []\n  });\n  currentQuestionsSubject = new BehaviorSubject([]);\n  constructor() {\n    this.loadQuestionsFromStorage();\n  }\n  // Observables para suscribirse a cambios\n  getQuestions() {\n    return this.questionsSubject.asObservable();\n  }\n  getCurrentQuestions() {\n    return this.currentQuestionsSubject.asObservable();\n  }\n  // Agregar nueva pregunta\n  addQuestion(question, answer, difficulty) {\n    const currentData = this.questionsSubject.value;\n    const newQuestion = {\n      id: this.generateId(),\n      question: question.trim(),\n      answer: answer.trim().toUpperCase(),\n      difficulty,\n      isFound: false,\n      foundLetters: Array(answer.trim().length).fill(false)\n    };\n    currentData[difficulty].push(newQuestion);\n    this.questionsSubject.next(currentData);\n    this.saveQuestionsToStorage();\n  }\n  // Eliminar pregunta\n  deleteQuestion(id) {\n    const currentData = this.questionsSubject.value;\n    for (const difficulty of ['facil', 'medio', 'dificil']) {\n      currentData[difficulty] = currentData[difficulty].filter(q => q.id !== id);\n    }\n    this.questionsSubject.next(currentData);\n    this.saveQuestionsToStorage();\n  }\n  // Editar pregunta\n  editQuestion(id, question, answer) {\n    const currentData = this.questionsSubject.value;\n    for (const difficulty of ['facil', 'medio', 'dificil']) {\n      const questionIndex = currentData[difficulty].findIndex(q => q.id === id);\n      if (questionIndex !== -1) {\n        currentData[difficulty][questionIndex].question = question.trim();\n        currentData[difficulty][questionIndex].answer = answer.trim().toUpperCase();\n        currentData[difficulty][questionIndex].foundLetters = Array(answer.trim().length).fill(false);\n        break;\n      }\n    }\n    this.questionsSubject.next(currentData);\n    this.saveQuestionsToStorage();\n  }\n  // Obtener preguntas por dificultad\n  getQuestionsByDifficulty(difficulty) {\n    return this.questionsSubject.value[difficulty];\n  }\n  // Cargar preguntas para el juego actual\n  loadGameQuestions(difficulty) {\n    const questions = this.getQuestionsByDifficulty(difficulty);\n    // Resetear estado de preguntas encontradas\n    const resetQuestions = questions.map(q => ({\n      ...q,\n      isFound: false,\n      foundLetters: Array(q.answer.length).fill(false)\n    }));\n    this.currentQuestionsSubject.next(resetQuestions);\n  }\n  // Marcar letra como encontrada\n  markLetterFound(questionId, letterIndex) {\n    const currentQuestions = this.currentQuestionsSubject.value;\n    const questionIndex = currentQuestions.findIndex(q => q.id === questionId);\n    if (questionIndex !== -1) {\n      currentQuestions[questionIndex].foundLetters[letterIndex] = true;\n      // Verificar si toda la palabra está encontrada\n      const allLettersFound = currentQuestions[questionIndex].foundLetters.every(found => found);\n      if (allLettersFound) {\n        currentQuestions[questionIndex].isFound = true;\n      }\n      this.currentQuestionsSubject.next([...currentQuestions]);\n    }\n  }\n  // Resetear progreso de preguntas actuales\n  resetCurrentQuestionsProgress() {\n    const currentQuestions = this.currentQuestionsSubject.value;\n    const resetQuestions = currentQuestions.map(q => ({\n      ...q,\n      isFound: false,\n      foundLetters: Array(q.answer.length).fill(false)\n    }));\n    this.currentQuestionsSubject.next(resetQuestions);\n  }\n  // Verificar si todas las preguntas están resueltas\n  areAllQuestionsResolved() {\n    const currentQuestions = this.currentQuestionsSubject.value;\n    return currentQuestions.length > 0 && currentQuestions.every(q => q.isFound);\n  }\n  // Obtener progreso de una pregunta\n  getQuestionProgress(questionId) {\n    const currentQuestions = this.currentQuestionsSubject.value;\n    const question = currentQuestions.find(q => q.id === questionId);\n    if (!question) return 0;\n    return question.foundLetters.filter(found => found).length;\n  }\n  // Obtener respuestas para colocar en el tablero\n  getCurrentAnswers() {\n    return this.currentQuestionsSubject.value.map(q => q.answer);\n  }\n  // Verificar si una letra pertenece a alguna respuesta\n  isLetterInAnswers(letter, row, col) {\n    return null;\n  }\n  // Guardar en localStorage\n  saveQuestionsToStorage() {\n    const data = this.questionsSubject.value;\n    localStorage.setItem('gameQuestions', JSON.stringify(data));\n  }\n  // Cargar desde localStorage\n  loadQuestionsFromStorage() {\n    const saved = localStorage.getItem('gameQuestions');\n    if (saved) {\n      try {\n        const data = JSON.parse(saved);\n        this.questionsSubject.next(data);\n      } catch (error) {\n        console.error('Error loading questions from storage:', error);\n        this.loadDefaultQuestions();\n      }\n    } else {\n      this.loadDefaultQuestions();\n    }\n  }\n  // Cargar preguntas por defecto\n  loadDefaultQuestions() {\n    const defaultQuestions = {\n      facil: [{\n        id: this.generateId(),\n        question: '¿Qué lenguaje de programación es popular para desarrollo web?',\n        answer: 'JAVASCRIPT',\n        difficulty: 'facil',\n        isFound: false,\n        foundLetters: Array(10).fill(false)\n      }, {\n        id: this.generateId(),\n        question: '¿Qué significa HTML?',\n        answer: 'HTML',\n        difficulty: 'facil',\n        isFound: false,\n        foundLetters: Array(4).fill(false)\n      }],\n      medio: [{\n        id: this.generateId(),\n        question: '¿Qué patrón de diseño permite crear objetos sin especificar su clase?',\n        answer: 'FACTORY',\n        difficulty: 'medio',\n        isFound: false,\n        foundLetters: Array(7).fill(false)\n      }],\n      dificil: [{\n        id: this.generateId(),\n        question: '¿Qué algoritmo de ordenamiento tiene complejidad O(n log n) en el caso promedio?',\n        answer: 'QUICKSORT',\n        difficulty: 'dificil',\n        isFound: false,\n        foundLetters: Array(9).fill(false)\n      }]\n    };\n    this.questionsSubject.next(defaultQuestions);\n    this.saveQuestionsToStorage();\n  }\n  // Generar ID único\n  generateId() {\n    return Date.now().toString(36) + Math.random().toString(36).substr(2);\n  }\n  // Limpiar todas las preguntas (útil para testing)\n  clearAllQuestions() {\n    this.questionsSubject.next({\n      facil: [],\n      medio: [],\n      dificil: []\n    });\n    this.saveQuestionsToStorage();\n  }\n  // Exportar preguntas (para backup)\n  exportQuestions() {\n    return JSON.stringify(this.questionsSubject.value, null, 2);\n  }\n  // Importar preguntas (desde backup)\n  importQuestions(jsonData) {\n    try {\n      const data = JSON.parse(jsonData);\n      // Validar estructura básica\n      if (data.facil && data.medio && data.dificil) {\n        this.questionsSubject.next(data);\n        this.saveQuestionsToStorage();\n        return true;\n      }\n    } catch (error) {\n      console.error('Error importing questions:', error);\n    }\n    return false;\n  }\n  static ɵfac = function QuestionService_Factory(t) {\n    return new (t || QuestionService)();\n  };\n  static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: QuestionService,\n    factory: QuestionService.ɵfac,\n    providedIn: 'root'\n  });\n}\nexport { QuestionService };","map":{"version":3,"names":["BehaviorSubject","QuestionService","questionsSubject","facil","medio","dificil","currentQuestionsSubject","constructor","loadQuestionsFromStorage","getQuestions","asObservable","getCurrentQuestions","addQuestion","question","answer","difficulty","currentData","value","newQuestion","id","generateId","trim","toUpperCase","isFound","foundLetters","Array","length","fill","push","next","saveQuestionsToStorage","deleteQuestion","filter","q","editQuestion","questionIndex","findIndex","getQuestionsByDifficulty","loadGameQuestions","questions","resetQuestions","map","markLetterFound","questionId","letterIndex","currentQuestions","allLettersFound","every","found","resetCurrentQuestionsProgress","areAllQuestionsResolved","getQuestionProgress","find","getCurrentAnswers","isLetterInAnswers","letter","row","col","data","localStorage","setItem","JSON","stringify","saved","getItem","parse","error","console","loadDefaultQuestions","defaultQuestions","Date","now","toString","Math","random","substr","clearAllQuestions","exportQuestions","importQuestions","jsonData","factory","ɵfac","providedIn"],"sources":["C:\\Users\\ETHAN PIERCE\\Desktop\\web\\P-Web\\src\\app\\services\\question.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\n\r\nexport interface Question {\r\n  id: string;\r\n  question: string;\r\n  answer: string;\r\n  difficulty: 'facil' | 'medio' | 'dificil';\r\n  isFound: boolean;\r\n  foundLetters: boolean[];\r\n}\r\n\r\nexport interface QuestionsData {\r\n  facil: Question[];\r\n  medio: Question[];\r\n  dificil: Question[];\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root' \r\n})\r\nexport class QuestionService {\r\n  private questionsSubject = new BehaviorSubject<QuestionsData>({\r\n    facil: [],\r\n    medio: [],\r\n    dificil: []\r\n  });\r\n\r\n  private currentQuestionsSubject = new BehaviorSubject<Question[]>([]);\r\n\r\n  constructor() {\r\n    this.loadQuestionsFromStorage();\r\n  }\r\n\r\n  // Observables para suscribirse a cambios\r\n  getQuestions(): Observable<QuestionsData> {\r\n    return this.questionsSubject.asObservable();\r\n  }\r\n\r\n  getCurrentQuestions(): Observable<Question[]> {\r\n    return this.currentQuestionsSubject.asObservable();\r\n  }\r\n\r\n  // Agregar nueva pregunta\r\n  addQuestion(question: string, answer: string, difficulty: 'facil' | 'medio' | 'dificil'): void {\r\n    const currentData = this.questionsSubject.value;\r\n    const newQuestion: Question = {\r\n      id: this.generateId(),\r\n      question: question.trim(),\r\n      answer: answer.trim().toUpperCase(),\r\n      difficulty,\r\n      isFound: false,\r\n      foundLetters: Array(answer.trim().length).fill(false)\r\n    };\r\n\r\n    currentData[difficulty].push(newQuestion);\r\n    this.questionsSubject.next(currentData);\r\n    this.saveQuestionsToStorage();\r\n  }\r\n\r\n  // Eliminar pregunta\r\n  deleteQuestion(id: string): void {\r\n    const currentData = this.questionsSubject.value;\r\n    \r\n    for (const difficulty of ['facil', 'medio', 'dificil'] as const) {\r\n      currentData[difficulty] = currentData[difficulty].filter(q => q.id !== id);\r\n    }\r\n    \r\n    this.questionsSubject.next(currentData);\r\n    this.saveQuestionsToStorage();\r\n  }\r\n\r\n  // Editar pregunta\r\n  editQuestion(id: string, question: string, answer: string): void {\r\n    const currentData = this.questionsSubject.value;\r\n    \r\n    for (const difficulty of ['facil', 'medio', 'dificil'] as const) {\r\n      const questionIndex = currentData[difficulty].findIndex(q => q.id === id);\r\n      if (questionIndex !== -1) {\r\n        currentData[difficulty][questionIndex].question = question.trim();\r\n        currentData[difficulty][questionIndex].answer = answer.trim().toUpperCase();\r\n        currentData[difficulty][questionIndex].foundLetters = Array(answer.trim().length).fill(false);\r\n        break;\r\n      }\r\n    }\r\n    \r\n    this.questionsSubject.next(currentData);\r\n    this.saveQuestionsToStorage();\r\n  }\r\n\r\n  // Obtener preguntas por dificultad\r\n  getQuestionsByDifficulty(difficulty: 'facil' | 'medio' | 'dificil'): Question[] {\r\n    return this.questionsSubject.value[difficulty];\r\n  }\r\n\r\n  // Cargar preguntas para el juego actual\r\n  loadGameQuestions(difficulty: 'facil' | 'medio' | 'dificil'): void {\r\n    const questions = this.getQuestionsByDifficulty(difficulty);\r\n    // Resetear estado de preguntas encontradas\r\n    const resetQuestions = questions.map(q => ({\r\n      ...q,\r\n      isFound: false,\r\n      foundLetters: Array(q.answer.length).fill(false)\r\n    }));\r\n    \r\n    this.currentQuestionsSubject.next(resetQuestions);\r\n  }\r\n\r\n  // Marcar letra como encontrada\r\n  markLetterFound(questionId: string, letterIndex: number): void {\r\n    const currentQuestions = this.currentQuestionsSubject.value;\r\n    const questionIndex = currentQuestions.findIndex(q => q.id === questionId);\r\n    \r\n    if (questionIndex !== -1) {\r\n      currentQuestions[questionIndex].foundLetters[letterIndex] = true;\r\n      \r\n      // Verificar si toda la palabra está encontrada\r\n      const allLettersFound = currentQuestions[questionIndex].foundLetters.every(found => found);\r\n      if (allLettersFound) {\r\n        currentQuestions[questionIndex].isFound = true;\r\n      }\r\n      \r\n      this.currentQuestionsSubject.next([...currentQuestions]);\r\n    }\r\n  }\r\n\r\n  // Resetear progreso de preguntas actuales\r\n  resetCurrentQuestionsProgress(): void {\r\n    const currentQuestions = this.currentQuestionsSubject.value;\r\n    const resetQuestions = currentQuestions.map(q => ({\r\n      ...q,\r\n      isFound: false,\r\n      foundLetters: Array(q.answer.length).fill(false)\r\n    }));\r\n    \r\n    this.currentQuestionsSubject.next(resetQuestions);\r\n  }\r\n\r\n  // Verificar si todas las preguntas están resueltas\r\n  areAllQuestionsResolved(): boolean {\r\n    const currentQuestions = this.currentQuestionsSubject.value;\r\n    return currentQuestions.length > 0 && currentQuestions.every(q => q.isFound);\r\n  }\r\n\r\n  // Obtener progreso de una pregunta\r\n  getQuestionProgress(questionId: string): number {\r\n    const currentQuestions = this.currentQuestionsSubject.value;\r\n    const question = currentQuestions.find(q => q.id === questionId);\r\n    \r\n    if (!question) return 0;\r\n    \r\n    return question.foundLetters.filter(found => found).length;\r\n  }\r\n\r\n  // Obtener respuestas para colocar en el tablero\r\n  getCurrentAnswers(): string[] {\r\n    return this.currentQuestionsSubject.value.map(q => q.answer);\r\n  }\r\n\r\n  // Verificar si una letra pertenece a alguna respuesta\r\n  isLetterInAnswers(letter: string, row: number, col: number): { questionId: string; letterIndex: number } | null {\r\n    return null;\r\n  }\r\n\r\n  // Guardar en localStorage\r\n  private saveQuestionsToStorage(): void {\r\n    const data = this.questionsSubject.value;\r\n    localStorage.setItem('gameQuestions', JSON.stringify(data));\r\n  }\r\n\r\n  // Cargar desde localStorage\r\n  private loadQuestionsFromStorage(): void {\r\n    const saved = localStorage.getItem('gameQuestions');\r\n    if (saved) {\r\n      try {\r\n        const data = JSON.parse(saved);\r\n        this.questionsSubject.next(data);\r\n      } catch (error) {\r\n        console.error('Error loading questions from storage:', error);\r\n        this.loadDefaultQuestions();\r\n      }\r\n    } else {\r\n      this.loadDefaultQuestions();\r\n    }\r\n  }\r\n\r\n  // Cargar preguntas por defecto\r\n  private loadDefaultQuestions(): void {\r\n    const defaultQuestions: QuestionsData = {\r\n      facil: [\r\n        {\r\n          id: this.generateId(),\r\n          question: '¿Qué lenguaje de programación es popular para desarrollo web?',\r\n          answer: 'JAVASCRIPT',\r\n          difficulty: 'facil',\r\n          isFound: false,\r\n          foundLetters: Array(10).fill(false)\r\n        },\r\n        {\r\n          id: this.generateId(),\r\n          question: '¿Qué significa HTML?',\r\n          answer: 'HTML',\r\n          difficulty: 'facil',\r\n          isFound: false,\r\n          foundLetters: Array(4).fill(false)\r\n        }\r\n      ],\r\n      medio: [\r\n        {\r\n          id: this.generateId(),\r\n          question: '¿Qué patrón de diseño permite crear objetos sin especificar su clase?',\r\n          answer: 'FACTORY',\r\n          difficulty: 'medio',\r\n          isFound: false,\r\n          foundLetters: Array(7).fill(false)\r\n        }\r\n      ],\r\n      dificil: [\r\n        {\r\n          id: this.generateId(),\r\n          question: '¿Qué algoritmo de ordenamiento tiene complejidad O(n log n) en el caso promedio?',\r\n          answer: 'QUICKSORT',\r\n          difficulty: 'dificil',\r\n          isFound: false,\r\n          foundLetters: Array(9).fill(false)\r\n        }\r\n      ]\r\n    };\r\n\r\n    this.questionsSubject.next(defaultQuestions);\r\n    this.saveQuestionsToStorage();\r\n  }\r\n\r\n  // Generar ID único\r\n  private generateId(): string {\r\n    return Date.now().toString(36) + Math.random().toString(36).substr(2);\r\n  }\r\n\r\n  // Limpiar todas las preguntas (útil para testing)\r\n  clearAllQuestions(): void {\r\n    this.questionsSubject.next({\r\n      facil: [],\r\n      medio: [],\r\n      dificil: []\r\n    });\r\n    this.saveQuestionsToStorage();\r\n  }\r\n\r\n  // Exportar preguntas (para backup)\r\n  exportQuestions(): string {\r\n    return JSON.stringify(this.questionsSubject.value, null, 2);\r\n  }\r\n\r\n  // Importar preguntas (desde backup)\r\n  importQuestions(jsonData: string): boolean {\r\n    try {\r\n      const data = JSON.parse(jsonData);\r\n      // Validar estructura básica\r\n      if (data.facil && data.medio && data.dificil) {\r\n        this.questionsSubject.next(data);\r\n        this.saveQuestionsToStorage();\r\n        return true;\r\n      }\r\n    } catch (error) {\r\n      console.error('Error importing questions:', error);\r\n    }\r\n    return false;\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}