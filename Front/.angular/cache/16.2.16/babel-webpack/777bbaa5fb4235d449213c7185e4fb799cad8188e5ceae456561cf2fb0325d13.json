{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nclass QuestionService {\n  // El BehaviorSubject ahora manejará un array de Puzzles\n  puzzlesSubject = new BehaviorSubject([]);\n  currentQuestionsSubject = new BehaviorSubject([]);\n  // Para compatibilidad con el sistema anterior\n  questionsSubject = new BehaviorSubject({\n    facil: [],\n    medio: [],\n    dificil: []\n  });\n  constructor() {\n    this.loadPuzzlesFromStorage();\n    this.loadTraditionalQuestionsFromStorage();\n  }\n  // ---- MÉTODOS PARA MANEJAR PUZZLES ----\n  getPuzzles() {\n    return this.puzzlesSubject.asObservable();\n  }\n  // Obtener puzzles predefinidos (niveles del sistema)\n  getDefaultPuzzles() {\n    return this.puzzlesSubject.value.filter(p => !p.isCustom);\n  }\n  // Obtener puzzles personalizados del usuario\n  getCustomPuzzles() {\n    return this.puzzlesSubject.value.filter(p => p.isCustom);\n  }\n  getPuzzleById(id) {\n    return this.puzzlesSubject.value.find(p => p.id === id);\n  }\n  // Método para crear puzzles personalizados\n  addCustomPuzzle(name, difficulty, rows, cols) {\n    // Validaciones de tamaño según dificultad\n    const validationResult = this.validatePuzzleSize(difficulty, rows, cols);\n    if (!validationResult.isValid) {\n      return {\n        success: false,\n        error: validationResult.error\n      };\n    }\n    // Validar que el nombre no esté vacío\n    if (!name.trim()) {\n      return {\n        success: false,\n        error: 'El nombre del puzzle es requerido'\n      };\n    }\n    const newPuzzle = {\n      id: this.generateId(),\n      name: name.trim(),\n      difficulty,\n      rows,\n      cols,\n      questions: [],\n      isCustom: true\n    };\n    const puzzles = this.puzzlesSubject.value;\n    puzzles.push(newPuzzle);\n    this.puzzlesSubject.next(puzzles);\n    this.savePuzzlesToStorage();\n    return {\n      success: true,\n      id: newPuzzle.id\n    };\n  }\n  // Método para validar tamaños de puzzle según dificultad\n  validatePuzzleSize(difficulty, rows, cols) {\n    switch (difficulty) {\n      case 'facil':\n        if (rows < 5 || cols < 5 || rows > 8 || cols > 8) {\n          return {\n            isValid: false,\n            error: 'Para dificultad Fácil, el tamaño debe estar entre 5x5 y 8x8'\n          };\n        }\n        break;\n      case 'medio':\n        if (rows < 9 || cols < 9 || rows > 11 || cols > 11) {\n          return {\n            isValid: false,\n            error: 'Para dificultad Medio, el tamaño debe estar entre 9x9 y 11x11'\n          };\n        }\n        break;\n      case 'dificil':\n        if (rows < 12 || cols < 12 || rows > 15 || cols > 15) {\n          return {\n            isValid: false,\n            error: 'Para dificultad Difícil, el tamaño debe estar entre 12x12 y 15x15'\n          };\n        }\n        break;\n    }\n    return {\n      isValid: true\n    };\n  }\n  // Método para agregar puzzles del sistema (niveles predefinidos)\n  addSystemPuzzle(name, difficulty, rows, cols) {\n    const newPuzzle = {\n      id: this.generateId(),\n      name,\n      difficulty,\n      rows,\n      cols,\n      questions: [],\n      isCustom: false\n    };\n    const puzzles = this.puzzlesSubject.value;\n    puzzles.push(newPuzzle);\n    this.puzzlesSubject.next(puzzles);\n    this.savePuzzlesToStorage();\n    return newPuzzle.id;\n  }\n  deletePuzzle(id) {\n    let puzzles = this.puzzlesSubject.value;\n    puzzles = puzzles.filter(p => p.id !== id);\n    this.puzzlesSubject.next(puzzles);\n    this.savePuzzlesToStorage();\n  }\n  editPuzzle(id, name, difficulty, rows, cols) {\n    const puzzles = this.puzzlesSubject.value;\n    const puzzleIndex = puzzles.findIndex(p => p.id === id);\n    if (puzzleIndex === -1) {\n      return {\n        success: false,\n        error: 'Puzzle no encontrado'\n      };\n    }\n    // Si es un puzzle personalizado, validar tamaño\n    if (puzzles[puzzleIndex].isCustom) {\n      const validationResult = this.validatePuzzleSize(difficulty, rows, cols);\n      if (!validationResult.isValid) {\n        return {\n          success: false,\n          error: validationResult.error\n        };\n      }\n    }\n    puzzles[puzzleIndex].name = name;\n    puzzles[puzzleIndex].difficulty = difficulty;\n    puzzles[puzzleIndex].rows = rows;\n    puzzles[puzzleIndex].cols = cols;\n    this.puzzlesSubject.next(puzzles);\n    this.savePuzzlesToStorage();\n    return {\n      success: true\n    };\n  }\n  // ---- MÉTODOS PARA MANEJAR PREGUNTAS DENTRO DE UN PUZZLE ----\n  addQuestionToPuzzle(puzzleId, question, answer) {\n    const puzzles = this.puzzlesSubject.value;\n    const puzzleIndex = puzzles.findIndex(p => p.id === puzzleId);\n    if (puzzleIndex === -1) return;\n    const puzzle = puzzles[puzzleIndex];\n    const newQuestion = {\n      id: this.generateId(),\n      question: question.trim(),\n      answer: answer.trim().toUpperCase(),\n      difficulty: puzzle.difficulty,\n      isFound: false,\n      foundLetters: Array(answer.trim().length).fill(false)\n    };\n    puzzles[puzzleIndex].questions.push(newQuestion);\n    this.puzzlesSubject.next(puzzles);\n    this.savePuzzlesToStorage();\n  }\n  deleteQuestionFromPuzzle(puzzleId, questionId) {\n    const puzzles = this.puzzlesSubject.value;\n    const puzzleIndex = puzzles.findIndex(p => p.id === puzzleId);\n    if (puzzleIndex !== -1) {\n      puzzles[puzzleIndex].questions = puzzles[puzzleIndex].questions.filter(q => q.id !== questionId);\n      this.puzzlesSubject.next(puzzles);\n      this.savePuzzlesToStorage();\n    }\n  }\n  editQuestionInPuzzle(puzzleId, questionId, question, answer) {\n    const puzzles = this.puzzlesSubject.value;\n    const puzzleIndex = puzzles.findIndex(p => p.id === puzzleId);\n    if (puzzleIndex !== -1) {\n      const questionIndex = puzzles[puzzleIndex].questions.findIndex(q => q.id === questionId);\n      if (questionIndex !== -1) {\n        puzzles[puzzleIndex].questions[questionIndex].question = question.trim();\n        puzzles[puzzleIndex].questions[questionIndex].answer = answer.trim().toUpperCase();\n        puzzles[puzzleIndex].questions[questionIndex].foundLetters = Array(answer.trim().length).fill(false);\n        this.puzzlesSubject.next(puzzles);\n        this.savePuzzlesToStorage();\n      }\n    }\n  }\n  // ---- MÉTODOS PARA COMPATIBILIDAD CON EL SISTEMA ANTERIOR DE PREGUNTAS ----\n  getQuestions() {\n    return this.questionsSubject.asObservable();\n  }\n  addQuestion(question, answer, difficulty) {\n    const newQuestion = {\n      id: this.generateId(),\n      question: question.trim(),\n      answer: answer.trim().toUpperCase(),\n      difficulty,\n      isFound: false,\n      foundLetters: Array(answer.trim().length).fill(false)\n    };\n    const currentData = this.questionsSubject.value;\n    currentData[difficulty].push(newQuestion);\n    this.questionsSubject.next({\n      ...currentData\n    });\n    this.saveTraditionalQuestionsToStorage();\n  }\n  editQuestion(questionId, question, answer) {\n    const currentData = this.questionsSubject.value;\n    let found = false;\n    // Buscar en todas las dificultades\n    for (const difficulty of ['facil', 'medio', 'dificil']) {\n      const questionIndex = currentData[difficulty].findIndex(q => q.id === questionId);\n      if (questionIndex !== -1) {\n        currentData[difficulty][questionIndex].question = question.trim();\n        currentData[difficulty][questionIndex].answer = answer.trim().toUpperCase();\n        currentData[difficulty][questionIndex].foundLetters = Array(answer.trim().length).fill(false);\n        found = true;\n        break;\n      }\n    }\n    if (found) {\n      this.questionsSubject.next({\n        ...currentData\n      });\n      this.saveTraditionalQuestionsToStorage();\n    }\n  }\n  deleteQuestion(questionId) {\n    const currentData = this.questionsSubject.value;\n    let found = false;\n    // Buscar y eliminar en todas las dificultades\n    for (const difficulty of ['facil', 'medio', 'dificil']) {\n      const questionIndex = currentData[difficulty].findIndex(q => q.id === questionId);\n      if (questionIndex !== -1) {\n        currentData[difficulty].splice(questionIndex, 1);\n        found = true;\n        break;\n      }\n    }\n    if (found) {\n      this.questionsSubject.next({\n        ...currentData\n      });\n      this.saveTraditionalQuestionsToStorage();\n    }\n  }\n  exportQuestions() {\n    const traditionalQuestions = this.questionsSubject.value;\n    const puzzles = this.puzzlesSubject.value;\n    return JSON.stringify({\n      traditionalQuestions,\n      puzzles\n    }, null, 2);\n  }\n  importQuestions(jsonData) {\n    try {\n      const data = JSON.parse(jsonData);\n      // Importar preguntas tradicionales si existen\n      if (data.traditionalQuestions) {\n        this.questionsSubject.next(data.traditionalQuestions);\n        this.saveTraditionalQuestionsToStorage();\n      }\n      // Importar puzzles si existen\n      if (data.puzzles && Array.isArray(data.puzzles)) {\n        this.puzzlesSubject.next(data.puzzles);\n        this.savePuzzlesToStorage();\n      }\n      return true;\n    } catch (error) {\n      console.error('Error importing questions:', error);\n      return false;\n    }\n  }\n  clearAllQuestions() {\n    this.questionsSubject.next({\n      facil: [],\n      medio: [],\n      dificil: []\n    });\n    this.saveTraditionalQuestionsToStorage();\n  }\n  // ---- MÉTODOS PARA EL JUEGO ----\n  loadGameConfig(puzzleId) {\n    const puzzle = this.getPuzzleById(puzzleId);\n    if (!puzzle) {\n      this.currentQuestionsSubject.next([]);\n      localStorage.removeItem('gameConfig');\n      return;\n    }\n    const gameConfig = {\n      puzzleId: puzzle.id,\n      puzzleName: puzzle.name,\n      rows: puzzle.rows,\n      cols: puzzle.cols,\n      difficulty: puzzle.difficulty,\n      questions: puzzle.questions.map(q => ({\n        ...q,\n        isFound: false,\n        foundLetters: Array(q.answer.length).fill(false)\n      }))\n    };\n    localStorage.setItem('gameConfig', JSON.stringify(gameConfig));\n    this.currentQuestionsSubject.next(gameConfig.questions);\n  }\n  // NUEVO MÉTODO: Cargar configuración del juego según dificultad del sistema\n  loadSystemGameConfig(difficulty) {\n    const difficultyTyped = difficulty;\n    // Definir configuraciones por dificultad\n    const systemConfigs = {\n      facil: {\n        rows: 8,\n        cols: 8,\n        questions: [{\n          question: 'Lenguaje de marcado para webs',\n          answer: 'HTML'\n        }, {\n          question: 'Da estilos a la web',\n          answer: 'CSS'\n        }, {\n          question: 'Lenguaje de programación para web',\n          answer: 'JAVASCRIPT'\n        }, {\n          question: 'Sistema de control de versiones',\n          answer: 'GIT'\n        }, {\n          question: 'Base de datos relacional',\n          answer: 'SQL'\n        }]\n      },\n      medio: {\n        rows: 10,\n        cols: 10,\n        questions: [{\n          question: 'Patrón de diseño para crear objetos',\n          answer: 'FACTORY'\n        }, {\n          question: 'Framework de JavaScript',\n          answer: 'ANGULAR'\n        }, {\n          question: 'Librería para interfaces',\n          answer: 'REACT'\n        }, {\n          question: 'Plataforma de desarrollo',\n          answer: 'NODEJS'\n        }, {\n          question: 'Protocolo de transferencia',\n          answer: 'HTTP'\n        }, {\n          question: 'Formato de intercambio de datos',\n          answer: 'JSON'\n        }]\n      },\n      dificil: {\n        rows: 12,\n        cols: 12,\n        questions: [{\n          question: 'Patrón de arquitectura de software',\n          answer: 'MICROSERVICIOS'\n        }, {\n          question: 'Metodología de desarrollo ágil',\n          answer: 'SCRUM'\n        }, {\n          question: 'Principio de responsabilidad única',\n          answer: 'SOLID'\n        }, {\n          question: 'Patrón de diseño observador',\n          answer: 'OBSERVER'\n        }, {\n          question: 'Contenedor de aplicaciones',\n          answer: 'DOCKER'\n        }, {\n          question: 'Orquestador de contenedores',\n          answer: 'KUBERNETES'\n        }, {\n          question: 'Integración continua',\n          answer: 'CICD'\n        }]\n      }\n    };\n    const config = systemConfigs[difficultyTyped];\n    if (!config) {\n      console.error('Dificultad no válida:', difficulty);\n      return;\n    }\n    // Crear preguntas con la estructura correcta\n    const questions = config.questions.map((q, index) => ({\n      id: `system-${difficulty}-${index}`,\n      question: q.question,\n      answer: q.answer.toUpperCase(),\n      difficulty: difficultyTyped,\n      isFound: false,\n      foundLetters: Array(q.answer.length).fill(false)\n    }));\n    const gameConfig = {\n      puzzleId: `system-${difficulty}`,\n      puzzleName: `Nivel ${difficulty.charAt(0).toUpperCase() + difficulty.slice(1)} del Sistema`,\n      rows: config.rows,\n      cols: config.cols,\n      difficulty: difficultyTyped,\n      questions: questions\n    };\n    localStorage.setItem('gameConfig', JSON.stringify(gameConfig));\n    this.currentQuestionsSubject.next(questions);\n  }\n  getCurrentGameConfig() {\n    const saved = localStorage.getItem('gameConfig');\n    return saved ? JSON.parse(saved) : null;\n  }\n  getCurrentQuestions() {\n    return this.currentQuestionsSubject.asObservable();\n  }\n  markLetterFound(questionId, letterIndex) {\n    const currentQuestions = this.currentQuestionsSubject.value;\n    const questionIndex = currentQuestions.findIndex(q => q.id === questionId);\n    if (questionIndex !== -1) {\n      currentQuestions[questionIndex].foundLetters[letterIndex] = true;\n      const allLettersFound = currentQuestions[questionIndex].foundLetters.every(found => found);\n      if (allLettersFound) {\n        currentQuestions[questionIndex].isFound = true;\n      }\n      this.currentQuestionsSubject.next([...currentQuestions]);\n    }\n  }\n  resetCurrentQuestionsProgress() {\n    const currentQuestions = this.currentQuestionsSubject.value;\n    const resetQuestions = currentQuestions.map(q => ({\n      ...q,\n      isFound: false,\n      foundLetters: Array(q.answer.length).fill(false)\n    }));\n    this.currentQuestionsSubject.next(resetQuestions);\n  }\n  areAllQuestionsResolved() {\n    const currentQuestions = this.currentQuestionsSubject.value;\n    return currentQuestions.length > 0 && currentQuestions.every(q => q.isFound);\n  }\n  getQuestionProgress(questionId) {\n    const currentQuestions = this.currentQuestionsSubject.value;\n    const question = currentQuestions.find(q => q.id === questionId);\n    if (!question) return {\n      found: 0,\n      total: 0\n    };\n    return {\n      found: question.foundLetters.filter(found => found).length,\n      total: question.foundLetters.length\n    };\n  }\n  getCurrentAnswers() {\n    return this.currentQuestionsSubject.value.map(q => q.answer);\n  }\n  // ---- MÉTODOS PRIVADOS ----\n  savePuzzlesToStorage() {\n    localStorage.setItem('wordSearchPuzzles', JSON.stringify(this.puzzlesSubject.value));\n  }\n  loadPuzzlesFromStorage() {\n    const saved = localStorage.getItem('wordSearchPuzzles');\n    if (saved) {\n      try {\n        const data = JSON.parse(saved);\n        this.puzzlesSubject.next(data);\n      } catch (error) {\n        console.error('Error loading puzzles from storage:', error);\n        this.loadDefaultPuzzles();\n      }\n    } else {\n      this.loadDefaultPuzzles();\n    }\n  }\n  saveTraditionalQuestionsToStorage() {\n    localStorage.setItem('traditionalQuestions', JSON.stringify(this.questionsSubject.value));\n  }\n  loadTraditionalQuestionsFromStorage() {\n    const saved = localStorage.getItem('traditionalQuestions');\n    if (saved) {\n      try {\n        const data = JSON.parse(saved);\n        this.questionsSubject.next(data);\n      } catch (error) {\n        console.error('Error loading traditional questions from storage:', error);\n      }\n    }\n  }\n  loadDefaultPuzzles() {\n    const defaultPuzzles = [{\n      id: 'default-facil',\n      name: 'Nivel Fácil - Introducción a la Web',\n      difficulty: 'facil',\n      rows: 8,\n      cols: 8,\n      isCustom: false,\n      questions: [{\n        id: 'q1',\n        question: 'Lenguaje de marcado para webs',\n        answer: 'HTML',\n        difficulty: 'facil',\n        isFound: false,\n        foundLetters: Array(4).fill(false)\n      }, {\n        id: 'q2',\n        question: 'Da estilos a la web',\n        answer: 'CSS',\n        difficulty: 'facil',\n        isFound: false,\n        foundLetters: Array(3).fill(false)\n      }, {\n        id: 'q3',\n        question: 'Lenguaje de programación para web',\n        answer: 'JAVASCRIPT',\n        difficulty: 'facil',\n        isFound: false,\n        foundLetters: Array(10).fill(false)\n      }]\n    }, {\n      id: 'default-medio',\n      name: 'Nivel Medio - Programación Avanzada',\n      difficulty: 'medio',\n      rows: 10,\n      cols: 10,\n      isCustom: false,\n      questions: [{\n        id: 'q4',\n        question: 'Patrón de diseño para crear objetos',\n        answer: 'FACTORY',\n        difficulty: 'medio',\n        isFound: false,\n        foundLetters: Array(7).fill(false)\n      }, {\n        id: 'q5',\n        question: 'Sistema de control de versiones',\n        answer: 'GIT',\n        difficulty: 'medio',\n        isFound: false,\n        foundLetters: Array(3).fill(false)\n      }]\n    }, {\n      id: 'default-dificil',\n      name: 'Nivel Difícil - Arquitectura de Software',\n      difficulty: 'dificil',\n      rows: 12,\n      cols: 12,\n      isCustom: false,\n      questions: [{\n        id: 'q6',\n        question: 'Patrón de arquitectura de software',\n        answer: 'MICROSERVICIOS',\n        difficulty: 'dificil',\n        isFound: false,\n        foundLetters: Array(13).fill(false)\n      }]\n    }];\n    this.puzzlesSubject.next(defaultPuzzles);\n    this.savePuzzlesToStorage();\n  }\n  generateId() {\n    return Date.now().toString(36) + Math.random().toString(36).substr(2);\n  }\n  clearAllPuzzles() {\n    // Solo limpiar puzzles personalizados, mantener los del sistema\n    const puzzles = this.puzzlesSubject.value;\n    const systemPuzzles = puzzles.filter(p => !p.isCustom);\n    this.puzzlesSubject.next(systemPuzzles);\n    this.savePuzzlesToStorage();\n  }\n  exportPuzzles() {\n    return JSON.stringify(this.puzzlesSubject.value, null, 2);\n  }\n  importPuzzles(jsonData) {\n    try {\n      const data = JSON.parse(jsonData);\n      if (Array.isArray(data)) {\n        this.puzzlesSubject.next(data);\n        this.savePuzzlesToStorage();\n        return true;\n      }\n    } catch (error) {\n      console.error('Error importing puzzles:', error);\n    }\n    return false;\n  }\n  static ɵfac = function QuestionService_Factory(t) {\n    return new (t || QuestionService)();\n  };\n  static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: QuestionService,\n    factory: QuestionService.ɵfac,\n    providedIn: 'root'\n  });\n}\nexport { QuestionService };","map":{"version":3,"names":["BehaviorSubject","QuestionService","puzzlesSubject","currentQuestionsSubject","questionsSubject","facil","medio","dificil","constructor","loadPuzzlesFromStorage","loadTraditionalQuestionsFromStorage","getPuzzles","asObservable","getDefaultPuzzles","value","filter","p","isCustom","getCustomPuzzles","getPuzzleById","id","find","addCustomPuzzle","name","difficulty","rows","cols","validationResult","validatePuzzleSize","isValid","success","error","trim","newPuzzle","generateId","questions","puzzles","push","next","savePuzzlesToStorage","addSystemPuzzle","deletePuzzle","editPuzzle","puzzleIndex","findIndex","addQuestionToPuzzle","puzzleId","question","answer","puzzle","newQuestion","toUpperCase","isFound","foundLetters","Array","length","fill","deleteQuestionFromPuzzle","questionId","q","editQuestionInPuzzle","questionIndex","getQuestions","addQuestion","currentData","saveTraditionalQuestionsToStorage","editQuestion","found","deleteQuestion","splice","exportQuestions","traditionalQuestions","JSON","stringify","importQuestions","jsonData","data","parse","isArray","console","clearAllQuestions","loadGameConfig","localStorage","removeItem","gameConfig","puzzleName","map","setItem","loadSystemGameConfig","difficultyTyped","systemConfigs","config","index","charAt","slice","getCurrentGameConfig","saved","getItem","getCurrentQuestions","markLetterFound","letterIndex","currentQuestions","allLettersFound","every","resetCurrentQuestionsProgress","resetQuestions","areAllQuestionsResolved","getQuestionProgress","total","getCurrentAnswers","loadDefaultPuzzles","defaultPuzzles","Date","now","toString","Math","random","substr","clearAllPuzzles","systemPuzzles","exportPuzzles","importPuzzles","factory","ɵfac","providedIn"],"sources":["C:\\Users\\ETHAN PIERCE\\Desktop\\web\\P-Web\\Front\\src\\app\\services\\question.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\n\r\n// Estructuras de datos actualizadas\r\nexport interface Question {\r\n  id: string;\r\n  question: string;\r\n  answer: string;\r\n  difficulty: 'facil' | 'medio' | 'dificil';\r\n  isFound: boolean;\r\n  foundLetters: boolean[];\r\n}\r\n\r\nexport interface Puzzle {\r\n  id: string;\r\n  name: string;\r\n  difficulty: 'facil' | 'medio' | 'dificil';\r\n  rows: number;\r\n  cols: number;\r\n  questions: Question[];\r\n  isCustom?: boolean; // Para diferenciar puzzles personalizados\r\n}\r\n\r\n// Estructura para compatibilidad con el sistema anterior\r\ntype QuestionsData = {\r\n  facil: Question[];\r\n  medio: Question[];\r\n  dificil: Question[];\r\n};\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class QuestionService {\r\n  // El BehaviorSubject ahora manejará un array de Puzzles\r\n  private puzzlesSubject = new BehaviorSubject<Puzzle[]>([]);\r\n  private currentQuestionsSubject = new BehaviorSubject<Question[]>([]);\r\n \r\n  // Para compatibilidad con el sistema anterior\r\n  private questionsSubject = new BehaviorSubject<QuestionsData>({ facil: [], medio: [], dificil: [] });\r\n\r\n  constructor() {\r\n    this.loadPuzzlesFromStorage();\r\n    this.loadTraditionalQuestionsFromStorage();\r\n  }\r\n\r\n  // ---- MÉTODOS PARA MANEJAR PUZZLES ----\r\n\r\n  getPuzzles(): Observable<Puzzle[]> {\r\n    return this.puzzlesSubject.asObservable();\r\n  }\r\n\r\n  // Obtener puzzles predefinidos (niveles del sistema)\r\n  getDefaultPuzzles(): Puzzle[] {\r\n    return this.puzzlesSubject.value.filter(p => !p.isCustom);\r\n  }\r\n\r\n  // Obtener puzzles personalizados del usuario\r\n  getCustomPuzzles(): Puzzle[] {\r\n    return this.puzzlesSubject.value.filter(p => p.isCustom);\r\n  }\r\n\r\n  getPuzzleById(id: string): Puzzle | undefined {\r\n    return this.puzzlesSubject.value.find(p => p.id === id);\r\n  }\r\n\r\n  // Método para crear puzzles personalizados\r\n  addCustomPuzzle(name: string, difficulty: 'facil' | 'medio' | 'dificil', rows: number, cols: number): { success: boolean; error?: string; id?: string } {\r\n    // Validaciones de tamaño según dificultad\r\n    const validationResult = this.validatePuzzleSize(difficulty, rows, cols);\r\n    if (!validationResult.isValid) {\r\n      return { success: false, error: validationResult.error };\r\n    }\r\n\r\n    // Validar que el nombre no esté vacío\r\n    if (!name.trim()) {\r\n      return { success: false, error: 'El nombre del puzzle es requerido' };\r\n    }\r\n\r\n    const newPuzzle: Puzzle = {\r\n      id: this.generateId(),\r\n      name: name.trim(),\r\n      difficulty,\r\n      rows,\r\n      cols,\r\n      questions: [],\r\n      isCustom: true\r\n    };\r\n\r\n    const puzzles = this.puzzlesSubject.value;\r\n    puzzles.push(newPuzzle);\r\n    this.puzzlesSubject.next(puzzles);\r\n    this.savePuzzlesToStorage();\r\n\r\n    return { success: true, id: newPuzzle.id };\r\n  }\r\n\r\n  // Método para validar tamaños de puzzle según dificultad\r\n  validatePuzzleSize(difficulty: 'facil' | 'medio' | 'dificil', rows: number, cols: number): { isValid: boolean; error?: string } {\r\n    switch (difficulty) {\r\n      case 'facil':\r\n        if (rows < 5 || cols < 5 || rows > 8 || cols > 8) {\r\n          return {\r\n            isValid: false,\r\n            error: 'Para dificultad Fácil, el tamaño debe estar entre 5x5 y 8x8'\r\n          };\r\n        }\r\n        break;\r\n      case 'medio':\r\n        if (rows < 9 || cols < 9 || rows > 11 || cols > 11) {\r\n          return {\r\n            isValid: false,\r\n            error: 'Para dificultad Medio, el tamaño debe estar entre 9x9 y 11x11'\r\n          };\r\n        }\r\n        break;\r\n      case 'dificil':\r\n        if (rows < 12 || cols < 12 || rows > 15 || cols > 15) {\r\n          return {\r\n            isValid: false,\r\n            error: 'Para dificultad Difícil, el tamaño debe estar entre 12x12 y 15x15'\r\n          };\r\n        }\r\n        break;\r\n    }\r\n    return { isValid: true };\r\n  }\r\n\r\n  // Método para agregar puzzles del sistema (niveles predefinidos)\r\n  addSystemPuzzle(name: string, difficulty: 'facil' | 'medio' | 'dificil', rows: number, cols: number): string {\r\n    const newPuzzle: Puzzle = {\r\n      id: this.generateId(),\r\n      name,\r\n      difficulty,\r\n      rows,\r\n      cols,\r\n      questions: [],\r\n      isCustom: false\r\n    };\r\n\r\n    const puzzles = this.puzzlesSubject.value;\r\n    puzzles.push(newPuzzle);\r\n    this.puzzlesSubject.next(puzzles);\r\n    this.savePuzzlesToStorage();\r\n\r\n    return newPuzzle.id;\r\n  }\r\n\r\n  deletePuzzle(id: string): void {\r\n    let puzzles = this.puzzlesSubject.value;\r\n    puzzles = puzzles.filter(p => p.id !== id);\r\n    this.puzzlesSubject.next(puzzles);\r\n    this.savePuzzlesToStorage();\r\n  }\r\n\r\n  editPuzzle(id: string, name: string, difficulty: 'facil' | 'medio' | 'dificil', rows: number, cols: number): { success: boolean; error?: string } {\r\n    const puzzles = this.puzzlesSubject.value;\r\n    const puzzleIndex = puzzles.findIndex(p => p.id === id);\r\n   \r\n    if (puzzleIndex === -1) {\r\n      return { success: false, error: 'Puzzle no encontrado' };\r\n    }\r\n\r\n    // Si es un puzzle personalizado, validar tamaño\r\n    if (puzzles[puzzleIndex].isCustom) {\r\n      const validationResult = this.validatePuzzleSize(difficulty, rows, cols);\r\n      if (!validationResult.isValid) {\r\n        return { success: false, error: validationResult.error };\r\n      }\r\n    }\r\n\r\n    puzzles[puzzleIndex].name = name;\r\n    puzzles[puzzleIndex].difficulty = difficulty;\r\n    puzzles[puzzleIndex].rows = rows;\r\n    puzzles[puzzleIndex].cols = cols;\r\n\r\n    this.puzzlesSubject.next(puzzles);\r\n    this.savePuzzlesToStorage();\r\n\r\n    return { success: true };\r\n  }\r\n\r\n  // ---- MÉTODOS PARA MANEJAR PREGUNTAS DENTRO DE UN PUZZLE ----\r\n\r\n  addQuestionToPuzzle(puzzleId: string, question: string, answer: string): void {\r\n    const puzzles = this.puzzlesSubject.value;\r\n    const puzzleIndex = puzzles.findIndex(p => p.id === puzzleId);\r\n\r\n    if (puzzleIndex === -1) return;\r\n\r\n    const puzzle = puzzles[puzzleIndex];\r\n\r\n    const newQuestion: Question = {\r\n      id: this.generateId(),\r\n      question: question.trim(),\r\n      answer: answer.trim().toUpperCase(),\r\n      difficulty: puzzle.difficulty,\r\n      isFound: false,\r\n      foundLetters: Array(answer.trim().length).fill(false)\r\n    };\r\n\r\n    puzzles[puzzleIndex].questions.push(newQuestion);\r\n    this.puzzlesSubject.next(puzzles);\r\n    this.savePuzzlesToStorage();\r\n  }\r\n\r\n  deleteQuestionFromPuzzle(puzzleId: string, questionId: string): void {\r\n    const puzzles = this.puzzlesSubject.value;\r\n    const puzzleIndex = puzzles.findIndex(p => p.id === puzzleId);\r\n\r\n    if (puzzleIndex !== -1) {\r\n      puzzles[puzzleIndex].questions = puzzles[puzzleIndex].questions.filter(q => q.id !== questionId);\r\n      this.puzzlesSubject.next(puzzles);\r\n      this.savePuzzlesToStorage();\r\n    }\r\n  }\r\n\r\n  editQuestionInPuzzle(puzzleId: string, questionId: string, question: string, answer: string): void {\r\n    const puzzles = this.puzzlesSubject.value;\r\n    const puzzleIndex = puzzles.findIndex(p => p.id === puzzleId);\r\n\r\n    if (puzzleIndex !== -1) {\r\n      const questionIndex = puzzles[puzzleIndex].questions.findIndex(q => q.id === questionId);\r\n      if (questionIndex !== -1) {\r\n        puzzles[puzzleIndex].questions[questionIndex].question = question.trim();\r\n        puzzles[puzzleIndex].questions[questionIndex].answer = answer.trim().toUpperCase();\r\n        puzzles[puzzleIndex].questions[questionIndex].foundLetters = Array(answer.trim().length).fill(false);\r\n\r\n        this.puzzlesSubject.next(puzzles);\r\n        this.savePuzzlesToStorage();\r\n      }\r\n    }\r\n  }\r\n\r\n  // ---- MÉTODOS PARA COMPATIBILIDAD CON EL SISTEMA ANTERIOR DE PREGUNTAS ----\r\n\r\n  getQuestions(): Observable<QuestionsData> {\r\n    return this.questionsSubject.asObservable();\r\n  }\r\n\r\n  addQuestion(question: string, answer: string, difficulty: 'facil' | 'medio' | 'dificil'): void {\r\n    const newQuestion: Question = {\r\n      id: this.generateId(),\r\n      question: question.trim(),\r\n      answer: answer.trim().toUpperCase(),\r\n      difficulty,\r\n      isFound: false,\r\n      foundLetters: Array(answer.trim().length).fill(false)\r\n    };\r\n\r\n    const currentData = this.questionsSubject.value;\r\n    currentData[difficulty].push(newQuestion);\r\n    this.questionsSubject.next({ ...currentData });\r\n    this.saveTraditionalQuestionsToStorage();\r\n  }\r\n\r\n  editQuestion(questionId: string, question: string, answer: string): void {\r\n    const currentData = this.questionsSubject.value;\r\n    let found = false;\r\n\r\n    // Buscar en todas las dificultades\r\n    for (const difficulty of ['facil', 'medio', 'dificil'] as const) {\r\n      const questionIndex = currentData[difficulty].findIndex(q => q.id === questionId);\r\n      if (questionIndex !== -1) {\r\n        currentData[difficulty][questionIndex].question = question.trim();\r\n        currentData[difficulty][questionIndex].answer = answer.trim().toUpperCase();\r\n        currentData[difficulty][questionIndex].foundLetters = Array(answer.trim().length).fill(false);\r\n        found = true;\r\n        break;\r\n      }\r\n    }\r\n\r\n    if (found) {\r\n      this.questionsSubject.next({ ...currentData });\r\n      this.saveTraditionalQuestionsToStorage();\r\n    }\r\n  }\r\n\r\n  deleteQuestion(questionId: string): void {\r\n    const currentData = this.questionsSubject.value;\r\n    let found = false;\r\n\r\n    // Buscar y eliminar en todas las dificultades\r\n    for (const difficulty of ['facil', 'medio', 'dificil'] as const) {\r\n      const questionIndex = currentData[difficulty].findIndex(q => q.id === questionId);\r\n      if (questionIndex !== -1) {\r\n        currentData[difficulty].splice(questionIndex, 1);\r\n        found = true;\r\n        break;\r\n      }\r\n    }\r\n\r\n    if (found) {\r\n      this.questionsSubject.next({ ...currentData });\r\n      this.saveTraditionalQuestionsToStorage();\r\n    }\r\n  }\r\n\r\n  exportQuestions(): string {\r\n    const traditionalQuestions = this.questionsSubject.value;\r\n    const puzzles = this.puzzlesSubject.value;\r\n\r\n    return JSON.stringify({\r\n      traditionalQuestions,\r\n      puzzles\r\n    }, null, 2);\r\n  }\r\n\r\n  importQuestions(jsonData: string): boolean {\r\n    try {\r\n      const data = JSON.parse(jsonData);\r\n\r\n      // Importar preguntas tradicionales si existen\r\n      if (data.traditionalQuestions) {\r\n        this.questionsSubject.next(data.traditionalQuestions);\r\n        this.saveTraditionalQuestionsToStorage();\r\n      }\r\n\r\n      // Importar puzzles si existen\r\n      if (data.puzzles && Array.isArray(data.puzzles)) {\r\n        this.puzzlesSubject.next(data.puzzles);\r\n        this.savePuzzlesToStorage();\r\n      }\r\n\r\n      return true;\r\n    } catch (error) {\r\n      console.error('Error importing questions:', error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  clearAllQuestions(): void {\r\n    this.questionsSubject.next({ facil: [], medio: [], dificil: [] });\r\n    this.saveTraditionalQuestionsToStorage();\r\n  }\r\n\r\n  // ---- MÉTODOS PARA EL JUEGO ----\r\n\r\n  loadGameConfig(puzzleId: string): void {\r\n    const puzzle = this.getPuzzleById(puzzleId);\r\n\r\n    if (!puzzle) {\r\n      this.currentQuestionsSubject.next([]);\r\n      localStorage.removeItem('gameConfig');\r\n      return;\r\n    }\r\n\r\n    const gameConfig = {\r\n      puzzleId: puzzle.id,\r\n      puzzleName: puzzle.name,\r\n      rows: puzzle.rows,\r\n      cols: puzzle.cols,\r\n      difficulty: puzzle.difficulty,\r\n      questions: puzzle.questions.map(q => ({\r\n        ...q,\r\n        isFound: false,\r\n        foundLetters: Array(q.answer.length).fill(false)\r\n      }))\r\n    };\r\n\r\n    localStorage.setItem('gameConfig', JSON.stringify(gameConfig));\r\n    this.currentQuestionsSubject.next(gameConfig.questions);\r\n  }\r\n\r\n  // NUEVO MÉTODO: Cargar configuración del juego según dificultad del sistema\r\n  loadSystemGameConfig(difficulty: string): void {\r\n    const difficultyTyped = difficulty as 'facil' | 'medio' | 'dificil';\r\n    \r\n    // Definir configuraciones por dificultad\r\n    const systemConfigs = {\r\n      facil: {\r\n        rows: 8,\r\n        cols: 8,\r\n        questions: [\r\n          { question: 'Lenguaje de marcado para webs', answer: 'HTML' },\r\n          { question: 'Da estilos a la web', answer: 'CSS' },\r\n          { question: 'Lenguaje de programación para web', answer: 'JAVASCRIPT' },\r\n          { question: 'Sistema de control de versiones', answer: 'GIT' },\r\n          { question: 'Base de datos relacional', answer: 'SQL' }\r\n        ]\r\n      },\r\n      medio: {\r\n        rows: 10,\r\n        cols: 10,\r\n        questions: [\r\n          { question: 'Patrón de diseño para crear objetos', answer: 'FACTORY' },\r\n          { question: 'Framework de JavaScript', answer: 'ANGULAR' },\r\n          { question: 'Librería para interfaces', answer: 'REACT' },\r\n          { question: 'Plataforma de desarrollo', answer: 'NODEJS' },\r\n          { question: 'Protocolo de transferencia', answer: 'HTTP' },\r\n          { question: 'Formato de intercambio de datos', answer: 'JSON' }\r\n        ]\r\n      },\r\n      dificil: {\r\n        rows: 12,\r\n        cols: 12,\r\n        questions: [\r\n          { question: 'Patrón de arquitectura de software', answer: 'MICROSERVICIOS' },\r\n          { question: 'Metodología de desarrollo ágil', answer: 'SCRUM' },\r\n          { question: 'Principio de responsabilidad única', answer: 'SOLID' },\r\n          { question: 'Patrón de diseño observador', answer: 'OBSERVER' },\r\n          { question: 'Contenedor de aplicaciones', answer: 'DOCKER' },\r\n          { question: 'Orquestador de contenedores', answer: 'KUBERNETES' },\r\n          { question: 'Integración continua', answer: 'CICD' }\r\n        ]\r\n      }\r\n    };\r\n\r\n    const config = systemConfigs[difficultyTyped];\r\n    \r\n    if (!config) {\r\n      console.error('Dificultad no válida:', difficulty);\r\n      return;\r\n    }\r\n\r\n    // Crear preguntas con la estructura correcta\r\n    const questions: Question[] = config.questions.map((q, index) => ({\r\n      id: `system-${difficulty}-${index}`,\r\n      question: q.question,\r\n      answer: q.answer.toUpperCase(),\r\n      difficulty: difficultyTyped,\r\n      isFound: false,\r\n      foundLetters: Array(q.answer.length).fill(false)\r\n    }));\r\n\r\n    const gameConfig = {\r\n      puzzleId: `system-${difficulty}`,\r\n      puzzleName: `Nivel ${difficulty.charAt(0).toUpperCase() + difficulty.slice(1)} del Sistema`,\r\n      rows: config.rows,\r\n      cols: config.cols,\r\n      difficulty: difficultyTyped,\r\n      questions: questions\r\n    };\r\n\r\n    localStorage.setItem('gameConfig', JSON.stringify(gameConfig));\r\n    this.currentQuestionsSubject.next(questions);\r\n  }\r\n\r\n  getCurrentGameConfig(): any {\r\n    const saved = localStorage.getItem('gameConfig');\r\n    return saved ? JSON.parse(saved) : null;\r\n  }\r\n\r\n  getCurrentQuestions(): Observable<Question[]> {\r\n    return this.currentQuestionsSubject.asObservable();\r\n  }\r\n\r\n  markLetterFound(questionId: string, letterIndex: number): void {\r\n    const currentQuestions = this.currentQuestionsSubject.value;\r\n    const questionIndex = currentQuestions.findIndex(q => q.id === questionId);\r\n\r\n    if (questionIndex !== -1) {\r\n      currentQuestions[questionIndex].foundLetters[letterIndex] = true;\r\n      const allLettersFound = currentQuestions[questionIndex].foundLetters.every(found => found);\r\n      \r\n      if (allLettersFound) {\r\n        currentQuestions[questionIndex].isFound = true;\r\n      }\r\n\r\n      this.currentQuestionsSubject.next([...currentQuestions]);\r\n    }\r\n  }\r\n\r\n  resetCurrentQuestionsProgress(): void {\r\n    const currentQuestions = this.currentQuestionsSubject.value;\r\n    const resetQuestions = currentQuestions.map(q => ({\r\n      ...q,\r\n      isFound: false,\r\n      foundLetters: Array(q.answer.length).fill(false)\r\n    }));\r\n\r\n    this.currentQuestionsSubject.next(resetQuestions);\r\n  }\r\n\r\n  areAllQuestionsResolved(): boolean {\r\n    const currentQuestions = this.currentQuestionsSubject.value;\r\n    return currentQuestions.length > 0 && currentQuestions.every(q => q.isFound);\r\n  }\r\n\r\n  getQuestionProgress(questionId: string): { found: number; total: number } {\r\n    const currentQuestions = this.currentQuestionsSubject.value;\r\n    const question = currentQuestions.find(q => q.id === questionId);\r\n\r\n    if (!question) return { found: 0, total: 0 };\r\n\r\n    return {\r\n      found: question.foundLetters.filter(found => found).length,\r\n      total: question.foundLetters.length\r\n    };\r\n  }\r\n\r\n  getCurrentAnswers(): string[] {\r\n    return this.currentQuestionsSubject.value.map(q => q.answer);\r\n  }\r\n\r\n  // ---- MÉTODOS PRIVADOS ----\r\n\r\n  private savePuzzlesToStorage(): void {\r\n    localStorage.setItem('wordSearchPuzzles', JSON.stringify(this.puzzlesSubject.value));\r\n  }\r\n\r\n  private loadPuzzlesFromStorage(): void {\r\n    const saved = localStorage.getItem('wordSearchPuzzles');\r\n    if (saved) {\r\n      try {\r\n        const data = JSON.parse(saved);\r\n        this.puzzlesSubject.next(data);\r\n      } catch (error) {\r\n        console.error('Error loading puzzles from storage:', error);\r\n        this.loadDefaultPuzzles();\r\n      }\r\n    } else {\r\n      this.loadDefaultPuzzles();\r\n    }\r\n  }\r\n\r\n  private saveTraditionalQuestionsToStorage(): void {\r\n    localStorage.setItem('traditionalQuestions', JSON.stringify(this.questionsSubject.value));\r\n  }\r\n\r\n  private loadTraditionalQuestionsFromStorage(): void {\r\n    const saved = localStorage.getItem('traditionalQuestions');\r\n    if (saved) {\r\n      try {\r\n        const data = JSON.parse(saved);\r\n        this.questionsSubject.next(data);\r\n      } catch (error) {\r\n        console.error('Error loading traditional questions from storage:', error);\r\n      }\r\n    }\r\n  }\r\n\r\n  private loadDefaultPuzzles(): void {\r\n    const defaultPuzzles: Puzzle[] = [\r\n      {\r\n        id: 'default-facil',\r\n        name: 'Nivel Fácil - Introducción a la Web',\r\n        difficulty: 'facil',\r\n        rows: 8,\r\n        cols: 8,\r\n        isCustom: false,\r\n        questions: [\r\n          {\r\n            id: 'q1',\r\n            question: 'Lenguaje de marcado para webs',\r\n            answer: 'HTML',\r\n            difficulty: 'facil',\r\n            isFound: false,\r\n            foundLetters: Array(4).fill(false)\r\n          },\r\n          {\r\n            id: 'q2',\r\n            question: 'Da estilos a la web',\r\n            answer: 'CSS',\r\n            difficulty: 'facil',\r\n            isFound: false,\r\n            foundLetters: Array(3).fill(false)\r\n          },\r\n          {\r\n            id: 'q3',\r\n            question: 'Lenguaje de programación para web',\r\n            answer: 'JAVASCRIPT',\r\n            difficulty: 'facil',\r\n            isFound: false,\r\n            foundLetters: Array(10).fill(false)\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        id: 'default-medio',\r\n        name: 'Nivel Medio - Programación Avanzada',\r\n        difficulty: 'medio',\r\n        rows: 10,\r\n        cols: 10,\r\n        isCustom: false,\r\n        questions: [\r\n          {\r\n            id: 'q4',\r\n            question: 'Patrón de diseño para crear objetos',\r\n            answer: 'FACTORY',\r\n            difficulty: 'medio',\r\n            isFound: false,\r\n            foundLetters: Array(7).fill(false)\r\n          },\r\n          {\r\n            id: 'q5',\r\n            question: 'Sistema de control de versiones',\r\n            answer: 'GIT',\r\n            difficulty: 'medio',\r\n            isFound: false,\r\n            foundLetters: Array(3).fill(false)\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        id: 'default-dificil',\r\n        name: 'Nivel Difícil - Arquitectura de Software',\r\n        difficulty: 'dificil',\r\n        rows: 12,\r\n        cols: 12,\r\n        isCustom: false,\r\n        questions: [\r\n          {\r\n            id: 'q6',\r\n            question: 'Patrón de arquitectura de software',\r\n            answer: 'MICROSERVICIOS',\r\n            difficulty: 'dificil',\r\n            isFound: false,\r\n            foundLetters: Array(13).fill(false)\r\n          }\r\n        ]\r\n      }\r\n    ];\r\n\r\n    this.puzzlesSubject.next(defaultPuzzles);\r\n    this.savePuzzlesToStorage();\r\n  }\r\n\r\n  private generateId(): string {\r\n    return Date.now().toString(36) + Math.random().toString(36).substr(2);\r\n  }\r\n\r\n  clearAllPuzzles(): void {\r\n    // Solo limpiar puzzles personalizados, mantener los del sistema\r\n    const puzzles = this.puzzlesSubject.value;\r\n    const systemPuzzles = puzzles.filter(p => !p.isCustom);\r\n    this.puzzlesSubject.next(systemPuzzles);\r\n    this.savePuzzlesToStorage();\r\n  }\r\n\r\n  exportPuzzles(): string {\r\n    return JSON.stringify(this.puzzlesSubject.value, null, 2);\r\n  }\r\n\r\n  importPuzzles(jsonData: string): boolean {\r\n    try {\r\n      const data = JSON.parse(jsonData);\r\n      if (Array.isArray(data)) {\r\n        this.puzzlesSubject.next(data);\r\n        this.savePuzzlesToStorage();\r\n        return true;\r\n      }\r\n    } catch (error) {\r\n      console.error('Error importing puzzles:', error);\r\n    }\r\n    return false;\r\n  }\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}